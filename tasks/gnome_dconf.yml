
# Standard dconf params

- name: Set standard dconf parameters
  dconf:
    key: "{{ item.key }}"
    value: "{{ item.val | default(omit) }}"
    state: "{{ item.state | default('present') }}"
  loop: "{{ dconf_options }}"
  become: false

# Custom hotkeys

- name: Create some empty arrays
  set_fact:
    _dconf_variable_list: [] # The main array
    _hotkey_list: [] # The array to build an index of custom keybindings
  become: false

- name: Compile a list of custom hotkeys with dconf
  vars: # Define some variables and dicts based on the loop iterator and list values
    hotkey_iterated: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom{{ idx }}"
    mydict_name:
      key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom{{ idx }}/name"
      val: "{{ hotkey.name }}"
    mydict_binding:
      key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom{{ idx }}/binding"
      val: "{{ hotkey.binding }}"
    mydict_command:
      key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom{{ idx }}/command"
      val: "{{ hotkey.command }}"
  set_fact: # And add those variables to the "cumulative" arrays
    _hotkey_list: "{{ _hotkey_list + [ hotkey_iterated ] }}" # Add the new hotkey to the array (one per hotkey)
    _dconf_variable_list: "{{ _dconf_variable_list + [ mydict_name ] + [ mydict_binding ] + [ mydict_command ] }}" # Add 3 key/value pairs for each hotkey (name, binding and command)
  loop: "{{ dconf_custom_hotkeys }}"
  loop_control:
    loop_var: hotkey
    index_var: idx # Define this to be able to reference the index
  become: false

- name: Add the hotkey list to the dconf variable list
  vars:
    dict_cumulative:
      key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings"
      val: "'{{ _hotkey_list | string }}'"
  set_fact:
    _dconf_variable_list: "{{ _dconf_variable_list + [ dict_cumulative ] }}"
  become: false

- name: Set dconf parameters for custom hotkeys
  dconf:
    key: "{{ item.key }}"
    value: "'{{ item.val }}'"
    state: "{{ item.state | default('present') }}"
  loop: "{{ _dconf_variable_list }}"
  become: false