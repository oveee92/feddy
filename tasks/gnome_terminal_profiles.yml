---
# Terminal theme stuff

- name: (gnome_terminal_profiles) - Get the terminal profiles list
  dconf:
    state: read
    key: "/org/gnome/terminal/legacy/profiles:/list"
  register: _terminal_profiles
  become: false

- name: (gnome_terminal_profiles) - Create a temporary list to work with
  set_fact:
    _wip_profile_list: "{{ _terminal_profiles.value | default([], true)  }}" # Defaults to [] if it returns an empty string
  become: false

- name: (gnome_terminal_profiles) - Compile a list of the profiles, generating a uuid from the profile name
  set_fact:
    _wip_profile_list: "{{  _wip_profile_list + [item.profile_name | to_uuid] }}"
  when: (item.profile_name | to_uuid) not in _wip_profile_list
  loop: "{{ gnome_terminal_settings | dict2items(key_name='profile_name',value_name='profile_values') }}"
  become: false

- name: (gnome_terminal_profiles) - Add the new profiles with dconf
  dconf:
    key: /org/gnome/terminal/legacy/profiles:/list
    value: "{{ _wip_profile_list }}"
  become: false

- name: (gnome_terminal_profiles) - Create a temporary variable, and then...
  set_fact:
    transformed_gnome_terminal_settings: []
  become: false

- name: (gnome_terminal_profiles) - ... transform the data into an easily iterable list, avoiding nested loops
  set_fact:
    transformed_gnome_terminal_settings: >-
      {{
        transformed_gnome_terminal_settings
        + gnome_terminal_settings[item.key]
        | map('combine', {'profile': item.key})
        | list
      }}
  with_dict: "{{ gnome_terminal_settings }}"
  become: false

- name: (gnome_terminal_profiles) - Loop through each entry in the temporary variable, building each profile one key at the time
  dconf:
    key: "/org/gnome/terminal/legacy/profiles:/:{{ item.profile | to_uuid }}/{{ item.key }}" # pay attention to the colons
    value: "{{ item.val }}"
  loop: "{{ transformed_gnome_terminal_settings }}"
  become: false

...
